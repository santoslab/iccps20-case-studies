// This file will be regenerated, do not edit

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <TimeServer/TimeServer.camkes>;;
import "components/TempSensor_i_tcp_tempSensor/TempSensor_i_tcp_tempSensor.camkes";
import "components/TempControl_i_tcp_tempControl/TempControl_i_tcp_tempControl.camkes";
import "components/Fan_i_tcp_fan/Fan_i_tcp_fan.camkes";
import "components/dispatch_periodic/dispatch_periodic.camkes";

assembly {
  composition {
    component TempSensor_i_tcp_tempSensor tcp_tempSensor;
    component TempControl_i_tcp_tempControl tcp_tempControl;
    component Fan_i_tcp_fan tcp_fan;
    component dispatch_periodic dispatch_periodic_inst;
    component TimeServer time_server;

    connection seL4SharedData conn1(from tcp_tempSensor.sb_currentTemp, to tcp_tempControl.sb_currentTemp);
    connection seL4Notification conn2(from tcp_tempSensor.sb_tempChanged, to tcp_tempControl.sb_tempChanged);
    connection seL4SharedData conn3(from tcp_tempSensor.sb_tempChanged_counter, to tcp_tempControl.sb_tempChanged_counter);
    connection seL4Notification conn4(from tcp_tempControl.sb_fanCmd_1_notification, to tcp_fan.sb_fanCmd_notification);
    connection seL4SharedData conn5(from tcp_tempControl.sb_fanCmd_queue_1, to tcp_fan.sb_fanCmd_queue);
    connection seL4Notification conn6(from tcp_fan.sb_fanAck_1_notification, to tcp_tempControl.sb_fanAck_notification);
    connection seL4SharedData conn7(from tcp_fan.sb_fanAck_queue_1, to tcp_tempControl.sb_fanAck_queue);
    connection seL4Notification conn8(from dispatch_periodic_inst.sb_tcp_tempSensor_periodic_dispatch_notification, to tcp_tempSensor.sb_periodic_dispatch_notification);
    connection seL4TimeServer conn9(from dispatch_periodic_inst.timer, to time_server.the_timer);
    connection seL4GlobalAsynchCallback conn10(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);
  }

  configuration {
    tcp_tempSensor.currentTemp_access = "W";
    tcp_tempSensor._stack_size = 110592;
    tcp_tempControl.currentTemp_access = "R";
    tcp_tempControl._stack_size = 110592;
    tcp_fan._stack_size = 110592;
    tcp_tempSensor.sb_tempChanged_counter_access = "W";
    tcp_tempControl.sb_tempChanged_counter_access = "R";
    tcp_tempControl.sb_fanCmd_queue_1_access = "W";
    tcp_fan.sb_fanCmd_queue_access = "R";
    tcp_fan.sb_fanAck_queue_1_access = "W";
    tcp_tempControl.sb_fanAck_queue_access = "R";
    time_server.timers_per_client = 1;
    dispatch_periodic_inst.timer_attributes = 1;
    dispatch_periodic_inst.priority = 201;

  }
}
